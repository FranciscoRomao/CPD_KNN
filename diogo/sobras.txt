/*
    if ((center_idx == 0 && npoints % 2 != 0) || (center_idx == 1 && npoints % 2 == 0)) //Se já não existir pontos à esquerda
    {
        newNode->lid = -1;
        newNode->lnode = NULL;
    }
    else //Se ainda houver pontos à esquerda
    {
        node lnode;
        lnode->id = (newNode->id) * 2 + 1;
        build_tree(lnode, pts, center_idx, n_dims); //center_idx happens to be the number of points in the set
    }

    if (npoints - center_idx == 1) //Significa que já não existe pontos à direita
    {
        newNode->rid = -1;
        newNode->rnode = NULL;
    }
    else
    {
        node rnode;
        rnode->id = (newNode->id) * 2 + 2;
        build_tree(rnode, pts + center_idx, npoints - center_idx, n_dims);
    }*/

/*
long *recursive_furthest_apart(double **pts, int n_dims, long np, long base_index,
                               double max_distance, long *furthest_pts)
{
    if (base_index == np - 2)
    { //only one point remaining
        return furthest_pts;
    }
    long furthest_pt = furthest_point(n_dims, np, pts, base_index);
    long new_distance = 0;
    if ((new_distance = distance(n_dims, pts[base_index], pts[furthest_pt])) > max_distance)
    {
        max_distance = new_distance;
        furthest_pts[0] = base_index;
        furthest_pts[1] = furthest_pt;
    }
    return recursive_furthest_apart(pts, n_dims, np, base_index + 1, max_distance, furthest_pts);
}

long *furthest_apart(int n_dims, long np, double **pts)
{
    long *furthest_pts = (long *)malloc(2 * sizeof(long));
    double max_distance = -1;
    double curr_distance = 0;
    for (long i = 0; i < np; i++)
    {
        for (long j = i + 1; j < np; j++)
        {
            if ((curr_distance = distance(n_dims, pts[i], pts[j])) > max_distance)
            {
                furthest_pts[0] = i;
                furthest_pts[1] = j;
            }
        }
    }
    return furthest_pts;
}
*/

long furthest_point(int n_dims, long n_points, double **pts, long base_idx)
{
    double max_dist = -1, curr_dist = 0;
    long idx_newpt = 0;

    for (long i = 0; i < n_points; i++)
    {
        if ((curr_dist = distance_(n_dims, pts[base_idx], pts[i])) > max_dist)
        {
            max_dist = curr_dist;
            idx_newpt = i;
        }
    }
    return idx_newpt;
}
